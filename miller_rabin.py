!pip install tabulate
import random
import math
from tabulate import tabulate


witness_list = []

def power(x, y, p):
    res = 1
    x = x % p
    while y > 0:
        if y & 1:
            res = (res * x) % p
        y = y >> 1  # y = y/2
        x = (x * x) % p
    return res

def miillerTest(d, n, a):
    x = power(a, d, n)
    if x == 1 or x == n - 1:
        return True
    while d != n - 1:
        x = (x * x) % n
        d *= 2
        if x == 1:
            return False
        if x == n - 1:
            return True
    return False

def isPrime(n, k):
    if n <= 1 or n == 4:
        return False
    if n <= 3:
        return True
    d = n - 1
    while d % 2 == 0:
        d //= 2
    for i in range(k):
        a = 2 + random.randint(1, n - 4)
        result = miillerTest(d, n, a)
        if not result:
            witness_list.append(a)
            return False
    return True

def bayes_formula(e, e_comp, f_given_e, f_given_e_comp):
    numerator = f_given_e * e
    denominator = (f_given_e * e) + (f_given_e_comp * e_comp)
    return numerator / denominator

def prime_probability(num, num_trials):
    COMPOSITE_GIVEN_ISCOMPOSITE_T = 1.0
    ISCOMPOSITE_T_GIVEN_COMPOSITE = 0.75
    prob_randnum_prime = 1 / (math.log(num))

    prime_prob = 0

    is_prime = isPrime(num, num_trials)

    for item in witness_list:
        if not is_prime:
            return prime_prob, is_prime

    prime_prob = bayes_formula(prob_randnum_prime, 1 - prob_randnum_prime,
                               COMPOSITE_GIVEN_ISCOMPOSITE_T,
                               pow(1 - ISCOMPOSITE_T_GIVEN_COMPOSITE, num_trials))

    return prime_prob, is_prime

input = [6700417, 524287, 2147483647, 67280421310721, 170141183460469231731687303715884105727, 20988936657440586486151264256610222593863921]
#input = [561, 41041, 75361, 126217, 488881, 5394826801, 1436697831295441, 1791562810662585767521,
       #    1590231231043178376951698401, 349407515342287435050603204719587201,
         #  12758106140074522771498516740500829830401]  #carmichael
#input = [127, 8191, 131071, 524287, 2147483647, 170141183460469231731687303715884105727 ] #mersenne

#input = [446087557183758429571151706402101809886208632412859901111991219963404685792820473369112545269003989026153245931124316702395758705693679364790903497461147071065254193353938124978226307947312410798874869040070279328428810311754844108094878252494866760969586998128982645877596028979171536962503068429617331702184750324583009171832104916050157628886606372145501702225925125224076829605427173573964812995250569412480720738476855293681666712844831190877620606786663862190240118570736831901886479225810414714078935386562497968178729127629594924411960961386713946279899275006954917139758796061223803393537381034666494402951052059047968693255388647930440925104186817009640171764133172418132836351,
#         71832908002168911355141300142655197170737184522917537431707234354771893965953683873089701655726017047865652033117056035633755236232130477576542287704073627336478630881953991197668971953322932114507125113528603913116375978526610109491985652509317039400274027625986953903122942307043594968670432685845669220994978222525763271542019605981193734707849609489765792897787460192342002129003854507353108381696358509272123512587129205838615993392504244651109122047,
#         6407709512903441307191248502871363361240465157050984423722459657552609506759421873990888751893379000353321552923233358553334983520227585773337733421010419363224467944361220178837689488007312897430362034678110392710258768963534517317795415244575628541866835987153637726080205718588341324538158354471607522528735259587003891050175113295626813209938741527632647245654436893087635245661807789440089813587876954601495334774445574169782533048652021230362464956535737634962104720295113651480527052967247871,
#         1475979915214180235084898622737381736312066145333169775147771216478570297878078949377407337049389289382748507531496480477281264838760259191814463365330269540496961201113430156902396093989090226259326935025281409614983499388222831448598601834318536230923772641390209490231836446899608210795482963763094236630945410832793769905399982457186322944729636418890623372171723742105636440368218459649632948538696905872650486914434637457507280441823676813517852099348660847172579408422316678097670224011990280170474894487426924742108823536808485072502240519452587542875349976558572670229633962575212637477897785501552646522609988869914013540483809865681250419497686697771007
#         ]

num_trials = 7

r_list = []
for input_num in input:
  r = prime_probability(input_num, num_trials)
  r_list.append([input_num, r[0], r[1]])


table_headers = ["Input Number", "Prime Probability", "Is Prime"]
table = tabulate(r_list, headers=table_headers, tablefmt="fancy_grid")


print(table)
